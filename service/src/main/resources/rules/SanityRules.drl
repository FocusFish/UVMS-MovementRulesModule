import eu.europa.ec.fisheries.uvms.rules.service.business.RawMovementFact;
import eu.europa.ec.fisheries.uvms.rules.service.business.RulesUtil;
import java.util.Date;

global eu.europa.ec.fisheries.uvms.rules.service.ValidationService validationService;
global org.slf4j.Logger logger;


rule "Sanity check - positionTime must exist"
dialect "java"
    when
        $fact : RawMovementFact(positionTime == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - positionTime must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - positionTime must exist", $fact);
end

rule "Sanity check - latitude must exist"
dialect "java"
    when
        $fact : RawMovementFact(latitude == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - latitude must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - latitude must exist", $fact);
end

rule "Sanity check - longitude must exist"
dialect "java"
    when
        $fact : RawMovementFact(longitude == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - longitude must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - longitude must exist", $fact);
end

// A mobile terminal must be connected to a vessel
rule "Sanity check - mobileTerminalConnectId must exist"
dialect "java"
    when
        $fact : RawMovementFact((mobileTerminalConnectId == null) && pluginType == "SATELLITE_RECEIVER")
    then
        logger.info("\t==> Executing RULE 'Sanity check - mobileTerminalConnectId must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - mobileTerminalConnectId must exist", $fact);
end

// A vessel must exist
rule "Sanity check - vesselConnectId must exist"
dialect "java"
    when
        $fact : RawMovementFact(vesselConnectId == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - vesselConnectId must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - vesselConnectId must exist", $fact);
end

// If INMARSAT_C
rule "Sanity check - mobileTerminalMemberNumber and mobileTerminalDnid must exist for INMARSAT_C"
dialect "java"
    when
        $fact : RawMovementFact((mobileTerminalMemberNumber == null || mobileTerminalDnid == null) && pluginType == "SATELLITE_RECEIVER" && mobileTerminalType == "INMARSAT_C")
    then
        logger.info("\t==> Executing RULE 'Sanity check - mobileTerminalMemberNumber and mobileTerminalDnid must exist for INMARSAT_C'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - mobileTerminalMemberNumber and mobileTerminalDnid must exist for INMARSAT_C", $fact);
end

// If IRIDIUM
rule "Sanity check - mobileTerminalSerialNumber must exist for IRIDIUM"
dialect "java"
    when
        $fact : RawMovementFact((mobileTerminalSerialNumber == null) && pluginType == "SATELLITE_RECEIVER" && mobileTerminalType == "IRIDIUM")
    then
        logger.info("\t==> Executing RULE 'Sanity check - mobileTerminalSerialNumber must exist for IRIDIUM'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - mobileTerminalSerialNumber must exist for IRIDIUM", $fact);
end

rule "Sanity check - comChannelType must exist"
dialect "java"
    when
        $fact : RawMovementFact(comChannelType == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - comChannelType must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - comChannelType must exist", $fact);
end

rule "Sanity check - assetType must exist"
dialect "java"
    when
        $fact : RawMovementFact((assetType == null) && (pluginType == "FLUX" || comChannelType == "MANUAL"))
    then
        logger.info("\t==> Executing RULE 'Sanity check - assetType must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - assetType must exist", $fact);
end

/*
rule "Sanity check - CFR, IRCS, IMO or MMSI must exist"
dialect "java"
    when
        $fact : RawMovementFact((vesselCfr == null && vesselIrcs == null && vesselImo == null && vesselMmsi == null) && (pluginType == "FLUX" || comChannelType == "MANUAL"))
    then
        logger.info("\t==> Executing RULE 'Sanity check - CFR, IRCS, IMO or MMSI must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - CFR, IRCS, IMO or MMSI must exist", $fact);
end
*/


/*
rule "Sanity check - statusCode must exist"
dialect "java"
    when
        $fact : RawMovementFact(statusCode == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - statusCode must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - statusCode must exist", $fact);
end

rule "Sanity check - reportedSpeed must exist"
dialect "java"
    when
        $fact : RawMovementFact(reportedSpeed == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - reportedSpeed must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - reportedSpeed must exist", $fact);
end

rule "Sanity check - reportedCourse must exist"
dialect "java"
    when
        $fact : RawMovementFact(reportedCourse == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - reportedCourse must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - reportedCourse must exist", $fact);
end






rule "Sanity check - movementType must exist"
dialect "java"
    when
        $fact : RawMovementFact(movementType == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - movementType must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - movementType must exist", $fact);
end

rule "Sanity check - source must exist"
dialect "java"
    when
        $fact : RawMovementFact(source == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - source must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - source must exist", $fact);
end

rule "Sanity check - activityCallback must exist"
dialect "java"
    when
        $fact : RawMovementFact(activityCallback == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - activityCallback must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - activityCallback must exist", $fact);
end

rule "Sanity check - activityMessageId must exist"
dialect "java"
    when
        $fact : RawMovementFact(activityMessageId == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - activityMessageId must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - activityMessageId must exist", $fact);
end

rule "Sanity check - activityMessageType must exist"
dialect "java"
    when
        $fact : RawMovementFact(activityMessageType == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - activityMessageType must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - activityMessageType must exist", $fact);
end
*/


/*
rule "Sanity check - Altitude must exist"
dialect "java"
    when
        $fact : RawMovementFact(altitude == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - altitude must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - altitude must exist", $fact);
end


rule "Sanity check - movementGuid must exist"
dialect "java"
    when
        $fact : RawMovementFact(movementGuid == null)
    then
        logger.info("\t==> Executing RULE 'Sanity check - movementGuid must exist'");
        $fact.setOk(false);
        validationService.createAlarmReport("Sanity check - movementGuid must exist", $fact);
end

*/

